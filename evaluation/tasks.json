{
	"settings": {
		"networking": {
			"Connection": {
			"MAX_COVERT_PAYLOAD": 4096,
			"PING_INTERVAL": 0.1,
			"MAX_MISSING_PINGS": 20,
			"MAX_RECONNECTS": 3,
			"PACKET_LOSS": 0,
			"ENCRYPT_PACKETS": false
			}
		},
		"routing": {
			"Router": {
				"OUTGOING_TIME": 0.02,
				"TIMING_FACTOR": 1
			},
			"ACO": {
				"ANONYMOUS_IDS": false,
				"ANT_COUNT": 5,
				"EVAPORATION_TIME": 5,
				"EVAPORATION_FACTOR": 0.75,
				"DEFAULT_ROUNDS": 15,
				"ACTIVATION_ROUNDS": 5,
				"ACTIVATING_ANTS": 2,
				"ANT_ROUND_TIME": 5,
				"ANT_MAINTENANCE_TIME": 0,
				"AGGRESSIVE_TEARDOWN": false,
				"PROBABILISTIC_FORWARDING_FRACTION": 0
			},
			"Flooding": {
				"ANONYMOUS_IDS": false,
				"MAX_HASHES": 1000,
				"REFLOOD_DELAY": 2,
				"RANDOM_MASTER_PUBLISH": false,
				"SUBSCRIBE_DELAY": 2.0,
				"AGGRESSIVE_TEARDOWN": false,
				"AGGRESSIVE_RESUBSCRIBE": false,
				"MIN_BECOME_MASTER_DELAY": 4,
				"MAX_BECOME_MASTER_DELAY": 10,
				"PROBABILISTIC_FORWARDING_FRACTION": 0,
				"AGGRESSIVE_REFLOODING": false
			},
			"Randomwalk": {
				"INITIAL_TTL": 60,
				"INITIAL_WALKERS": 5,
				"PROBABILISTIC_FORWARDING_FRACTION": 0
			},
			"Gossiping": {
				"INITIAL_TTL": 60,
				"GOSSIPING_PEERS": 2,
				"PROBABILISTIC_FORWARDING_FRACTION": 0
			}
		}
	},
	"task_defaults": {
		"base_ip": "127.0.0.100",
		"nodes": 100,
		"graph_args": {"avgdegree": 4},
		"publishers": 5,
		"subscribers": 10,
		"rounds": 15
	},
	"tasks": {
		"flooding_suboptimal_paths": {
			"runtime": 45,
			"router": "Flooding",
			"iterate": {
				"setting": "routing.Flooding.SUBSCRIBE_DELAY",
				"iterator": "numpy.linspace(0, 5, 11)"
			},
			//initialize result vars
			"init": {
				"shorter_subscribers": 0,
				"shorter_intermediates": 0
			},
			//collect raw evaluation values into result vars
			"output": {
				"shorter_subscribers": "evaluation.shorter_subscribers",
				"shorter_intermediates": "evaluation.shorter_intermediates"
			},
			//use this reduction function to accumulate values of all rounds into one (every var can have its own reduction function)
			"reduce": {
				"shorter_subscribers": "numpy.mean(valuelist)",
				"shorter_intermediates": "numpy.mean(valuelist)"
			}
		},
		"flooding_master_count": {
			"runtime": 35,
			"router": "Flooding",
			"settings": {
				"MIN_BECOME_MASTER_DELAY": 4.0
			},
			"iterate": {
				"setting": "routing.Flooding.MAX_BECOME_MASTER_DELAY",
				"iterator": "numpy.linspace(10.0, 20.0, 1.0)"
			},
			"init": {
				"master_publishers": 0
			},
			"output": {
				"master_publishers": "evaluation.master_publishers",
				"slave_publishers": "task['publishers'] - evaluation.master_publishers"
			},
			"reduce": {
				"master_publishers": "numpy.mean(valuelist)",
				"slave_publishers": "numpy.mean(valuelist)"
			}
		},
		"flooding_overlay_construction": {
			"runtime": 35,
			"router": "Flooding",
			"settings": {
				"MIN_BECOME_MASTER_DELAY": 2.0,
				"MAX_BECOME_MASTER_DELAY": 15.0
			},
			"init": {
				"overlay_construction": []
			},
			"output": {
				"overlay_construction_min": "min(evaluation.overlay_construction) if len(evaluation.overlay_construction) == task['subscribers'] else 'only %d successfull connects' % len(evaluation.overlay_construction)",
				"overlay_construction_max": "max(evaluation.overlay_construction) if len(evaluation.overlay_construction) == task['subscribers'] else 'only %d successfull connects' % len(evaluation.overlay_construction)",
				"overlay_construction_avg": "numpy.mean(evaluation.overlay_construction) if len(evaluation.overlay_construction) == task['subscribers'] else 'only %d successfull connects' % len(evaluation.overlay_construction)",
				"overlay_construction_all_min": "len(evaluation.overlay_construction)",
				"overlay_construction_all_max": "len(evaluation.overlay_construction)",
				"overlay_construction_all_avg": "len(evaluation.overlay_construction)"
			},
			"reduce": {
				"overlay_construction_min": "numpy.mean(valuelist)",
				"overlay_construction_max": "numpy.mean(valuelist)",
				"overlay_construction_avg": "numpy.mean(valuelist)",
				"overlay_construction_all_min": "min(valuelist)",
				"overlay_construction_all_max": "max(valuelist)",
				"overlay_construction_all_avg": "numpy.mean(valuelist)"
			}
		},
		"aco_overlay_construction": {
			"runtime": 100,
			"router": "ACO",
			"iterate": {
				"setting": ["routing.ACO.ANT_ROUND_TIME", "routing.ACO.EVAPORATION_TIME"],
				"iterator": "[(x, x) for x in numpy.linspace(1.0, 8.0, 8.0)]"
			},
			"init": {
				"overlay_construction": []
			},
			"output": {
				"overlay_construction_min": "min(evaluation.overlay_construction) if len(evaluation.overlay_construction) == task['subscribers'] else 'only %d successfull connects' % len(evaluation.overlay_construction)",
				"overlay_construction_max": "max(evaluation.overlay_construction) if len(evaluation.overlay_construction) == task['subscribers'] else 'only %d successfull connects' % len(evaluation.overlay_construction)",
				"overlay_construction_avg": "numpy.mean(evaluation.overlay_construction) if len(evaluation.overlay_construction) == task['subscribers'] else 'only %d successfull connects' % len(evaluation.overlay_construction)",
				"overlay_construction_all_min": "len(evaluation.overlay_construction)",
				"overlay_construction_all_max": "len(evaluation.overlay_construction)",
				"overlay_construction_all_avg": "len(evaluation.overlay_construction)"
			},
			"reduce": {
				"overlay_construction_min": "numpy.mean(valuelist)",
				"overlay_construction_max": "numpy.mean(valuelist)",
				"overlay_construction_avg": "numpy.mean(valuelist)",
				"overlay_construction_all_min": "min(valuelist)",
				"overlay_construction_all_max": "max(valuelist)",
				"overlay_construction_all_avg": "numpy.mean(valuelist)"
			}
		},
		"aco_overlay_construction_bandwidth": {
			"runtime": 100,
			"router": "ACO",
			"iterate": {
				"setting": "networking.MAX_COVERT_PAYLOAD",
				"iterator": "[1024, 2048, 4096, 8192, 16368, 32768, 65536]"
			},
			"init": {
				"overlay_construction": []
			},
			"output": {
				"overlay_construction_min": "min(evaluation.overlay_construction) if len(evaluation.overlay_construction) == task['subscribers'] else 'only %d successfull connects' % len(evaluation.overlay_construction)",
				"overlay_construction_max": "max(evaluation.overlay_construction) if len(evaluation.overlay_construction) == task['subscribers'] else 'only %d successfull connects' % len(evaluation.overlay_construction)",
				"overlay_construction_avg": "numpy.mean(evaluation.overlay_construction) if len(evaluation.overlay_construction) == task['subscribers'] else 'only %d successfull connects' % len(evaluation.overlay_construction)",
				"overlay_construction_all_min": "len(evaluation.overlay_construction)",
				"overlay_construction_all_max": "len(evaluation.overlay_construction)",
				"overlay_construction_all_avg": "len(evaluation.overlay_construction)"
			},
			"reduce": {
				"overlay_construction_min": "numpy.mean(valuelist)",
				"overlay_construction_max": "numpy.mean(valuelist)",
				"overlay_construction_avg": "numpy.mean(valuelist)",
				"overlay_construction_all_min": "min(valuelist)",
				"overlay_construction_all_max": "max(valuelist)",
				"overlay_construction_all_avg": "numpy.mean(valuelist)"
			}
		},
		"all_reconnects_on_packetloss": {
			"runtime": 60,
			"router": "Flooding",
			"iterate": {
				"setting": "networking.PACKET_LOSS",
				"iterator": "numpy.linspace(0, 0.75, 15)"
			},
			"init": {
				"reconnects": []
			},
			"output": {
				"reconnects_min": "min(evaluation.reconnects) if len(evaluation.reconnects) else 0",
				"reconnects_max": "max(evaluation.reconnects) if len(evaluation.reconnects) else 0",
				"reconnects_avg": "numpy.mean(evaluation.reconnects) if len(evaluation.reconnects) else 0"
			},
			"reduce": {
				"reconnects_min": "numpy.mean(valuelist)",
				"reconnects_max": "numpy.mean(valuelist)",
				"reconnects_avg": "numpy.mean(valuelist)"
			}
		},
		"flooding_overlay_construction_packetloss": {
			"runtime": 120,
			"router": "ACO",
			"iterate": {
				"setting": "networking.PACKET_LOSS",
				"iterator": "numpy.linspace(0, 0.75, 15)"
			},
			"init": {
				"overlay_construction": []
			},
			"output": {
				"overlay_construction_min": "min(evaluation.overlay_construction) if len(evaluation.overlay_construction) == task['subscribers'] else 'only %d successfull connects' % len(evaluation.overlay_construction)",
				"overlay_construction_max": "max(evaluation.overlay_construction) if len(evaluation.overlay_construction) == task['subscribers'] else 'only %d successfull connects' % len(evaluation.overlay_construction)",
				"overlay_construction_avg": "numpy.mean(evaluation.overlay_construction) if len(evaluation.overlay_construction) == task['subscribers'] else 'only %d successfull connects' % len(evaluation.overlay_construction)",
				"overlay_construction_all_min": "len(evaluation.overlay_construction)",
				"overlay_construction_all_max": "len(evaluation.overlay_construction)",
				"overlay_construction_all_avg": "len(evaluation.overlay_construction)"
			},
			"reduce": {
				"overlay_construction_min": "numpy.mean(valuelist)",
				"overlay_construction_max": "numpy.mean(valuelist)",
				"overlay_construction_avg": "numpy.mean(valuelist)",
				"overlay_construction_all_min": "min(valuelist)",
				"overlay_construction_all_max": "max(valuelist)",
				"overlay_construction_all_avg": "numpy.mean(valuelist)"
			}
		},
		"aco_overlay_construction_packetloss": {
			"runtime": 120,
			"router": "ACO",
			"iterate": {
				"setting": "networking.PACKET_LOSS",
				"iterator": "numpy.linspace(0, 0.75, 15)"
			},
			"init": {
				"overlay_construction": []
			},
			"output": {
				"overlay_construction_min": "min(evaluation.overlay_construction) if len(evaluation.overlay_construction) == task['subscribers'] else 'only %d successfull connects' % len(evaluation.overlay_construction)",
				"overlay_construction_max": "max(evaluation.overlay_construction) if len(evaluation.overlay_construction) == task['subscribers'] else 'only %d successfull connects' % len(evaluation.overlay_construction)",
				"overlay_construction_avg": "numpy.mean(evaluation.overlay_construction) if len(evaluation.overlay_construction) == task['subscribers'] else 'only %d successfull connects' % len(evaluation.overlay_construction)",
				"overlay_construction_all_min": "len(evaluation.overlay_construction)",
				"overlay_construction_all_max": "len(evaluation.overlay_construction)",
				"overlay_construction_all_avg": "len(evaluation.overlay_construction)"
			},
			"reduce": {
				"overlay_construction_min": "numpy.mean(valuelist)",
				"overlay_construction_max": "numpy.mean(valuelist)",
				"overlay_construction_avg": "numpy.mean(valuelist)",
				"overlay_construction_all_min": "min(valuelist)",
				"overlay_construction_all_max": "max(valuelist)",
				"overlay_construction_all_avg": "numpy.mean(valuelist)"
			}
		}
	}
}